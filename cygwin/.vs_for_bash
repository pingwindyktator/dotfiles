#!/bin/bash

alias vsvars32='/c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio\ 14.0/Common7/Tools/vsvars32.bat'
alias devenv='/c/Program\ Files\ \(x86\)/Microsoft\ Visual\ Studio\ 14.0/Common7/IDE/devenv.com'
alias beep='rundll32 user32.dll,MessageBeep'
declare -A shortcuts=(
                     )

__vs_test_mode=true

__vs_get_config () {
    local configuration platform

    case "$1" in
        debug|deb|Debug|d)                   configuration="Debug"         ;;
        release|rel|Release|r)               configuration="Release"       ;;
        staticdebug|sdeb|StaticDebug|sd)     configuration="StaticDebug"   ;;
        staticrelease|srel|StaticRelease|sr) configuration="StaticRelease" ;;
        "")                                  configuration="Debug"         ;;
        -*)                                  configuration="Debug"         ;;
        *)                                   configuration="$1"            ;;
    esac
    case "$2" in
        win32|Win32|w32)       platform="Win32"            ;;
        any|Any|anycpu|AnyCPU) platform="Any CPU"          ;;
        mixed|mix|Mix|Mixed)   platform="Mixed Platforms"  ;;
        x64)                   platform="x64"              ;;
        "")                    platform="Win32"            ;;
        -*)                    platform="Win32"            ;;
        *)                     platform="$2"               ;;
    esac

    echo "$configuration|$platform"
}

__vs_get_proj () {
    local result
    result="$1"
    for s in ${!shortcuts[@]}; do
        [[ "$1" == "$s" ]] && result=${shortcuts["$s"]}
    done
    echo $(cygpath -aw "$result")
}

__vs_build () {
    local proj configuration cmd
    proj=$(__vs_get_proj "$1")
    configuration="$(__vs_get_config "$2" "$3")"

    if [[ "$proj" == *.vcxproj || "$proj" == *.vcproj ]]; then
        cmd="vsvars32 ; time devenv '$proj' /Build '$configuration' /Project '$proj'"
    else
        cmd="vsvars32 ; time devenv '$proj' /Build '$configuration'"
    fi

    [[ $__vs_test_mode == true ]] && echo $cmd || eval '$cmd'
}

__vs_rebuild () {
    local proj configuration 
    configuration="$(__vs_get_config "$2" "$3")"
    proj=$(__vs_get_proj "$1")

    if [[ "$proj" == *.vcxproj || "$proj" == *.vcproj ]]; then
        cmd="vsvars32 ; time devenv '$proj' /Rebuild '$configuration' /Project '$proj'"
    else
        cmd="vsvars32 ; time devenv '$proj' /Rebuild '$configuration'"
    fi

    [[ $__vs_test_mode == true ]] && echo $cmd || eval '$cmd'
}

__vs_clean () {
    local proj
    proj=$(__vs_get_proj "$1")

    vsvars32
    time devenv "$proj" /Clean
}

__vs_help () {
    echo "Usage:  vs [build|b] [project|solution]_filename [configuration] [platform]"
    echo "        vs [rebuild|r] [project|solution]_filename [configuration] [platform]"
    echo "        vs clean [project|solution]_filename"
    echo "        vs help"
    echo ""
    echo "Configurations: debug, deb, Debug, d"
    echo "                release, rel, Release, r"
    echo "                staticdebug, sdeb, StaticDebug, sd"
    echo "                staticrelease, srel, StaticRelease, sr"
    echo ""
    echo "Platforms: win32, Win32, w32"
    echo "           any, Any, anycpu, AnyCPU"
    echo "           mixed, mix, Mix, Mixed"
    echo "           x64"
}

__vs_test () {
    local counter test_starts __vs_test_mode_backup
    __vs_test_mode_backup=$__vs_test_mode
    __vs_test_mode=true
    counter=0
    test_starts='((counter++)) ; echo -n "$counter: "'

    eval $test_starts ; [[ "$(vs build a/b/c.sln sr x64 -b)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Build 'StaticRelease|x64'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs build a/b/c.sln BBB CCC)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Build 'BBB|CCC'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs build a/b/c.vcxproj d CCC)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.vcxproj)' /Build 'Debug|CCC' /Project '$(cygpath -aw a/b/c.vcxproj)'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs build a/b/c.sln rel CCC)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Build 'Release|CCC'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs build a/b/c.sln srel)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Build 'StaticRelease|Win32'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs b a/b/c.sln sd mix)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Build 'StaticDebug|Mixed Platforms'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs b a/b/c.sln)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Build 'Debug|Win32'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs b a/b/c.sln -b -n)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Build 'Debug|Win32'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs b a/b/c.sln d -b)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Build 'Debug|Win32'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs b a/b/c.sln d)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Build 'Debug|Win32'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs b a/b/c.sln sr x64)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Build 'StaticRelease|x64'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs r a/b/c.sln BBB CCC)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Rebuild 'BBB|CCC'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs r a/b/c.sln d CCC)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Rebuild 'Debug|CCC'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs r a/b/c.sln rel CCC)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Rebuild 'Release|CCC'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs r a/b/c.sln srel)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Rebuild 'StaticRelease|Win32'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs rebuild a/b/c.sln sd mix)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Rebuild 'StaticDebug|Mixed Platforms'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs rebuild a/b/c.sln)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Rebuild 'Debug|Win32'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs rebuild a/b/c.sln d)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Rebuild 'Debug|Win32'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs rebuild a/b/c.vcproj -b -n)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.vcproj)' /Rebuild 'Debug|Win32' /Project '$(cygpath -aw a/b/c.vcproj)'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs rebuild a/b/c.sln d -b)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Rebuild 'Debug|Win32'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs rebuild a/b/c.sln sr x64)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Rebuild 'StaticRelease|x64'" ]] && echo "OK" || echo "ERROR"
    eval $test_starts ; [[ "$(vs rebuild a/b/c.sln sr x64 -b)" == "vsvars32 ; time devenv '$(cygpath -aw a/b/c.sln)' /Rebuild 'StaticRelease|x64'" ]] && echo "OK" || echo "ERROR"
    __vs_test_mode=$__vs_test_mode_backup
}

vs () {
    case "$1" in
        build|b)     __vs_build "$2" "$3" "$4" "$5" "$6" "$7" "$8"   ;;

        rebuild|r)   __vs_rebuild "$2" "$3" "$4" "$5" "$6" "$7" "$8" ;;

        clean|c)     __vs_clean "$2" "$3" "$4" "$5" "$6" "$7" "$8"   ;;

        help)        __vs_help                                       ;;

        __test)      __vs_test                                       ;;

        *)           __vs_help                                       ;;
    esac
}
